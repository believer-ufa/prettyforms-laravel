<?php

use Symfony\CS\Config\Config;
use Symfony\CS\FixerInterface;
use Symfony\CS\Finder\DefaultFinder;

$fixers = [
    
    // Главные функции должны использоваться вместо их псевдонимов
    // Подробнее о функциях-псевдонимах: http://php.net/manual/ru/aliases.php
    'alias_functions',
    
    // Совместить двойные символы стрелок в последовательные линии
    // Align double arrow symbols in consecutive lines
    'align_double_arrow',
    
    // Упорядочить символы присванивания в последовательные линии
    'align_equals',

    // При объявлении массива, не должно быть пробела перед запятой
    'array_element_no_space_before_comma',
    
    // При объявлении массива, должен быть один пробел после каждой запятой
    'array_element_white_space_after_comma',

    // Проверяет, чтобы при открытии тега была одна пустая строка между тэгом и кодом
    'blankline_after_open_tag',

    // Тело каждой структуры должно быть объято фигурными скобками.
    // Фигурные скобки должны быть правильно поставлены.
    // Тело внутри скобок должно быть с правильным отступом.
    'braces',
    
    // Объединение строк не должно содержать пробелы
    'concat_without_spaces',

    // Оператор => не должен быть окружён пробелами в несколько строк
    'double_arrow_multiline_whitespaces',

    // Удалить дублирующие запятые
    'duplicate_semicolon',

    // Ключевое слово "elseif" должно использоваться вместо "else if", чтобы все контрольные слова
    // выглядели как одно слово
    'elseif',

    // Файлы с PHP кодом должны использовать только одну кодировку: UTF-8 без BOM
    'encoding',

    // Файл всегда должен оканчиваться одной пустой строкой
    'eof_ending',

    // Удаляет лишние пустые строки
    'extra_empty_lines',

    // Когда мы вызываем метод или вызов функции, не должно быть пробелов между методом или названием функции и открывающей скобкой
    'function_call_space',
    
    // Пробелы должны быть расставлены правильным образом при объявлении функции
    'function_declaration',
    
    // Добавить отсутствующий пробел между аргументом функции и пояснением к её типу
    'function_typehint_space',

    // Добавить, изменить или удалить комментарий в шапке
    // Довольно странная штука. Что она значит, интересно?
    // 'header_comment',
    
    // Метод inlcude и путь к файлу должны быть разделены одним пробелом. Путь к файлу не должен быть помещен под скобками
    'include',
    
    // Код должен использовать 4 пробела в качестве отступа и не должен использовать табуляцию
    'indentation',

    // Отсутствует описание на сайте. неизвестно, что это    
    //'join_function',
    
    // Должна быть одна пустая строка после объявления неймспейса
    'line_after_namespace',
    
    // Все PHP файлы должны должны использовать Unix окончания строк (LF)
    'linefeed',

    // Удалить конечные запятые в использовании функции list()
    'list_commas',
    
    // Логический оператор отрицания (!) должен быть выделен пробелом с обеих сторон
    'logical_not_operators_with_spaces',
    
    // Логические операторы отрицания (!) должны иметь один конечный пробел
    'logical_not_operators_with_successor_space',

    // PHP константы true, false и null должны указываться в нижнем регистре
    'lowercase_constants',

    // Ключевые слова PHP должны указываться в нижнем регистре
    'lowercase_keywords',
    
    // В аргументах методов и вызовах методов, не должно быть пробела перед каждой запятой и должен быть один пробел после каждой запятой
    'method_argument_space',
    
    // Методы должны быть разделены одной пустой строкой
    'method_separation',
    
    // PHP многострочные массивы должны иметь заверщующую точку с запятой
    'multiline_array_trailing_comma',
    
    // Многострочные пробелы перед закрывающей точкой с запятой запрещены
    'multiline_spaces_before_semicolon',
    
    // Мы должны использовать одно ключевое слово use на объявление
    'multiple_use',
    
    // В объявлении namespace линия не должна содержать начальных пробелов
    'namespace_no_leading_whitespace',
    
    // Все использования, созданные с ключевым словом new, должны сопровождаться фигурными скобками
    // 'new_with_braces',
    
    // Убедитесь, что нет никакого кода на той же линии, на которой находится открывающий PHP тег
    'newline_after_open_tag',
    
    // Не должно быть никаких пустых строк после закрывающей скобки класса
    'no_blank_lines_after_class_opening',
    
    // Не должно быть пустых строк между док-блоком и документируемым элементом
    'no_empty_lines_after_phpdocs',
    
    // Не должно быть пробелов перед и после объекта T_OBJECT_OPERATOR
    'object_operator',
    
    // Бинарные операторы должны быть окружены как-минимум одним пробелом
    'operators_spaces',
    
    // Сортирует операторы use
    'ordered_use',
    
    // Не должно быть пробела после открывающей скобки.
    // Не должно быть пробелы перед закрывающей скобкой.
    'parenthesis',
    
    // Закрывающий PHP тэг должен быть опущен в файлах, содержащих только PHP код
    'php_closing_tag',
    
    // Все элементы из @param, @throws, @return, @var, и @type phpdoc тэгов должны быть отсортированы вертиалько
    'phpdoc_align',

    // Док-блоки должны иметь такой же отступ как и документируемый объект
    'phpdoc_indent',
    
    // Поправить phpdoc внутри тэгов, сделать наследуемые док-блоки всегда встроенными
    // Fix PHPDoc inline tags, make inheritdoc always inline.
    // ??? Что всё это значит вообще?)
    'phpdoc_inline_tag',
    
    // @access аннотации должны быть опущены в док-блоках
    'phpdoc_no_access',
    
    // @return void и @return null аннотации должны быть опущены в док-блоках
    'phpdoc_no_empty_return',
    
    // @package и @subpackage аннотации должны быть опущены в док-блоках
    'phpdoc_no_package',
    
    // Аннотации в док-блоках должны быть отсортированы, снчала параметры, потом исключения, потом возвращаемые значения
    'phpdoc_order',

    // Скалярные типы должны быть написаны в одной форме: "int", не "integer"; "bool", не "boolean"; "float", не "real" или "double".
    'phpdoc_scalar',
    
    // Аннотации в док-блоках должны быть сгруппированы вместе так, что аннотации
    // одного типы должны немедленно следовать за последующими, и аннотации различного типа должны быть
    // разделены одной пустрой строкой
    'phpdoc_separation',
    
    // Краткое изложение док-блока должно оканчиваться точкой, восклицательным знаком или знаком вопроса
    'phpdoc_summary',

    // Док-блоки должны использоваться только на структурных элементах
    // Docblocks should only be used on structural elements.
    // ???
    'phpdoc_to_comment',
    
    // Док-блоки должны начинаться и заканчиваться с контентом, за исключением самой первой и последней строк док-блоков 
    'phpdoc_trim',
    
    // @type всегда должен писаться как @var
    'phpdoc_type_to_var',
    
    // @var и @type аннотации не должны содержать названия переменной
    'phpdoc_var_without_name',
    
    // Префиксный инкремент/декремент должен использоваться, если это возможно
    // Подробнее: http://php.net/manual/ru/language.operators.increment.php
    'pre_increment',

    // Удалить начальные слэши из use операторов
    'remove_leading_slash_use',
    
    // Убрать переносы строк между use операторами
    'remove_lines_between_uses',
    
    // Пустая строка должна предшествовать оператору return
    'return',
    
    // Внутри классового элемента, оператор "self" должен быть приоритетнее названия класса
    'self_accessor',
    
    // Массивы должны использовать короткий PHP 5.4 синтаксис массивов
    'short_array_syntax',
    
    /* PHP код должен использовать длинный синтаксис подключения <?php ?> или короткий синтаксис вывода <?= ?>, нет других вариантов */
    'short_tag',

    // PHP однострочные массивы не должны иметь завершающей точки с запятой
    // PHP single-line arrays should not have trailing comma.
    // ???
    'single_array_no_trailing_comma',
    
    // Должна быть одна пустая строка перед объявлением namespace'а
    'single_blank_line_before_namespace',
    
    // Каждый неймспейс должен идти на своей строке и должен иметь одну пустую строку после блока use операторов
    'single_line_after_imports',
    
    // Конвертировать двойные кавычки в одинарные для простых строк
    'single_quote',
    
    // Пустая строка перед закрывающей точкой с запятой запрещена
    'spaces_before_semicolon',
    
    // Один пробел должен быть между значением и объявлением переменной
    // A single space should be between cast and variable.
    'spaces_cast',
    
    // Заменить все <> на !=
    'standardize_not_equal',
    
    // Стандартизированные пробелы вокруг тернарных операторов
    'ternary_spaces',
    
    // Удалить завершающие пробелы в конце непустых строк
    'trailing_spaces',
    
    // Массивы должны быть отформатированы как аргументы функций/методов, без начальных и конечных пустых строк
    'trim_array_spaces',
    
    // Унарные операторы должны быть размещены рядом с их операндами.
    'unary_operators_spaces',
    
    // Неиспользуемые use операторы должны быть удалены
    'unused_use',

    // Видимость должна быть объявлена для всех свойств и методов.
    // abstract и final должны быть объявлены перед видимостью
    // static должен быть объявлен после видимости
    'visibility',
    
    // Удалить плетущиеся пробелы в пустых строках
    'whitespacy_lines',
];

return Config::create()
    ->finder(DefaultFinder::create()->in(__DIR__))
    ->fixers($fixers)
    ->level(FixerInterface::NONE_LEVEL)
    ->setUsingCache(true);